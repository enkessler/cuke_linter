RSpec.describe CukeLinter::UniqueScenarioNamesLinter do
  let(:linter) { described_class.new }

  before do
    described_class.instance_variable_set(:@scenario_names, {})
  end

  context 'when there are duplicate scenario names within a feature file' do
    let(:feature_file) do
      """
      Feature: Sample Feature

        Scenario: Duplicate Scenario Name
          Given something

        Scenario: Duplicate Scenario Name
          Given something else
      """
    end

    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file').tests
    end

    it 'detects duplicate scenario names' do
      results = model.map { |scenario| linter.lint(scenario) }.compact
      expect(results).to match_array([
                                       { linter:   'UniqueScenarioNamesLinter',
                                         problem:  'Scenario names are not unique',
                                         location: 'path_to_file:7' }
                                     ])
    end
  end

  context 'when a scenario outline generates duplicate names' do
    let(:feature_file) do
      """
      Feature: Sample Feature with Scenario Outline

        Scenario Outline: Repeated Scenario Name Doing <input>

        Examples:
          | input          |
          | Something      |
          | Something      |
      """
    end

    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file').tests
    end

    it 'reports duplicate scenario names generated by the scenario outline' do
      results = model.map { |scenario| linter.lint(scenario) }.compact
      expect(results).to include(
        {
          linter:   'UniqueScenarioNamesLinter',
          problem:  'Template creates scenario names that are not unique',
          location: 'path_to_file:4'
        }
      )
    end
  end

  context 'when a scenario outline generates a name identical to a regular scenario' do
    let(:feature_file) do
      """
      Feature: Feature with Mixed Scenarios

        Scenario: Duplicate Scenario Name
          Given something

        Scenario Outline: Duplicate Scenario Name
          Given something

        Examples:
          | input          |
          | Something      |
      """
    end

    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file').tests
    end

    it 'reports duplicate names generated by the scenario outline and the regular scenario' do
      results = model.map { |scenario| linter.lint(scenario) }.compact
      expect(results).to include(
        {
          linter:   'UniqueScenarioNamesLinter',
          problem:  'Template creates scenario names that are not unique',
          location: 'path_to_file:7'
        }
      )
    end
  end

  context 'when two scenario outlines generate identical names' do
    let(:feature_file) do
      """
      Feature: Feature with Conflicting Scenario Outlines

        Scenario Outline: Conflicting Scenario Name <input>
          Given something

        Examples:
          | input          |
          | Conflict       |

        Scenario Outline: Conflicting Scenario Name <input>
          Given something else

        Examples:
          | input          |
          | Conflict       |
      """
    end

    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file').tests
    end

    it 'reports duplicate names generated by different scenario outlines' do
      results = model.map { |scenario| linter.lint(scenario) }.compact
      expect(results).to include(
        {
          linter:   'UniqueScenarioNamesLinter',
          problem:  'Template creates scenario names that are not unique',
          location: 'path_to_file:11'
        }
      )
    end
  end

  context 'when a scenario outline does not use placeholders but creates duplicates' do
    let(:feature_file) do
      """
      Feature: Feature with Scenario Outline

        Scenario Outline: Scenario Name
          Given something

        Examples:
          | input           |
          | Something       |
          | Something else  |
      """
    end

    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file').tests
    end

    it 'reports problems when a scenario outline generates duplicate names without placeholders' do
      results = model.map { |scenario| linter.lint(scenario) }.compact
      expect(results).to include(
        {
          linter:   'UniqueScenarioNamesLinter',
          problem:  'Template creates scenario names that are not unique',
          location: 'path_to_file:4'
        }
      )
    end
  end

  context 'when scenario names are duplicated across different feature files' do
    let(:feature_file_1) do
      """
      Feature: First Feature

        Scenario: Duplicate Scenario Name
          Given something
      """
    end

    let(:feature_file_2) do
      """
      Feature: Second Feature

        Scenario: Duplicate Scenario Name
          Given something else
      """
    end

    let(:model_1) do
      generate_feature_model(source_text: feature_file_1, parent_file_path: 'path_to_first_file').tests
    end

    let(:model_2) do
      generate_feature_model(source_text: feature_file_2, parent_file_path: 'path_to_second_file').tests
    end

    it 'allows duplicate names across different feature files' do
      results_1 = model_1.map { |scenario| linter.lint(scenario) }.compact
      results_2 = model_2.map { |scenario| linter.lint(scenario) }.compact
      expect(results_1).to be_empty
      expect(results_2).to be_empty
    end
  end

  context 'when there are duplicate scenario names within a Rule' do
    let(:feature_file) do
      """
      Feature: Feature with Rule

        Rule: Sample Rule
          Scenario: Duplicate Scenario Name
            Given something

          Scenario: Duplicate Scenario Name
            Given something else
      """
    end

    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file')
    end

    it 'detects duplicate scenario names within a Rule' do
      results = model.rules.first.tests.map { |scenario| linter.lint(scenario) }.compact
      expect(results).to match_array([
                                       { linter:   'UniqueScenarioNamesLinter',
                                         problem:  'Scenario names are not unique',
                                         location: 'path_to_file:8' }
                                     ])
    end
  end

  context 'when there are duplicate scenario names across multiple Rules within a feature' do
    let(:feature_file) do
      """
      Feature: Feature with Multiple Rules
  
        Rule: First Rule
          Scenario: Duplicate Scenario Name
            Given something
  
        Rule: Second Rule
          Scenario: Duplicate Scenario Name
            Given something else
      """
    end
  
    let(:model) do
      generate_feature_model(source_text: feature_file, parent_file_path: 'path_to_file')
    end
  
    it 'detects duplicate scenario names across multiple Rules within a feature' do
      results = model.rules.flat_map { |rule| rule.tests.map { |scenario| linter.lint(scenario) } }.compact
      expect(results).to match_array([
                                       { linter:   'UniqueScenarioNamesLinter',
                                         problem:  'Scenario names are not unique',
                                         location: 'path_to_file:9' }
                                     ])
    end
  end
end
